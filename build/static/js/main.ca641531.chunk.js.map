{"version":3,"sources":["services/phonebookService.js","components/ContactItem.js","components/ContactList.js","components/ContactForm.js","components/FilterByName.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["phonebookService","axios","get","concat","then","response","data","newPerson","post","id","updatedPerson","put","delete","ContactItem","_ref","person","onDelete","name","number","react_default","a","createElement","type","onClick","ContactList","contacts","filter","item","includes","map","contact","components_ContactItem","key","ContactForm","addPerson","newName","onNameChange","onPhoneChange","newPhone","onSubmit","value","onChange","FilterByName","filterValue","Notification","message","_ref$type","className","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewPhone","_useState7","_useState8","newNameFilter","setNewNameFilter","_useState9","_useState10","notificationMessage","setNotificationMessage","_useState11","_useState12","notificationType","setNotificationType","setNotification","arguments","length","undefined","setTimeout","useEffect","result","catch","updatePhoneNumber","personId","find","p","objectSpread","components_Notification_Notification","components_FilterByName","e","target","components_ContactForm","event","preventDefault","personExistsByName","window","confirm","alert","toConsumableArray","components_ContactList","newPersons","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.ca641531.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst serverUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n    const request =  axios.get(`${serverUrl}`);\r\n    return request.then(response => response.data);\r\n};\r\n\r\nconst addNewPerson = (newPerson) => {\r\n    return axios.post(`${serverUrl}`, newPerson)\r\n        .then(response => response.data);\r\n};\r\n\r\nconst updatePerson = (id, updatedPerson) => {\r\n    return axios.put(`${serverUrl}/${id}`, updatedPerson)\r\n        .then(response => response.data);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${serverUrl}/${id}`)\r\n        .then(response => response.data);\r\n};\r\n\r\nexport default {\r\n    getAll,\r\n    addNewPerson,\r\n    updatePerson,\r\n    deletePerson\r\n}","import React from 'react';\r\n\r\nfunction ContactItem({person, onDelete}) {\r\n    const {name, number} = person;\r\n    return (\r\n        <div>\r\n            <span>{name}: {number} </span>\r\n            <button type=\"button\" onClick={() => onDelete(person)}>delete</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport ContactItem from './ContactItem';\r\n\r\nfunction ContactList({contacts, filter, onDelete}) {\r\n    const getContactItems = () => {\r\n        let newContacts = filter ? contacts.filter((item) => item.name.includes(filter)) : contacts;\r\n        return newContacts.map((contact) => <ContactItem person={contact} onDelete={onDelete} key={contact.id}/>);\r\n    };\r\n    return (\r\n        <div>\r\n            {\r\n                getContactItems()\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ContactList;","import React from 'react';\r\n\r\nfunction ContactForm({addPerson, newName, onNameChange, onPhoneChange, newPhone}) {\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                name: <input type=\"text\" value={newName} onChange={onNameChange} />\r\n            </div>\r\n            <div>\r\n                phone number: <input type=\"text\" value={newPhone} onChange={onPhoneChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ContactForm;","import React from 'react';\r\n\r\nfunction FilterByName({filterValue, onChange}) {\r\n    return (\r\n        <form>\r\n            <div>\r\n                <input type=\"text\" value={filterValue} onChange={onChange}/>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default FilterByName;","import React from 'react';\r\nimport './Notification.css';\r\n\r\nfunction Notification({message, type = ''}) {\r\n    if (!message) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className={`notification ${type}`}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\r\nimport phonebookService from '../services/phonebookService';\r\n\r\nimport ContactList from './ContactList';\r\nimport ContactForm from './ContactForm';\r\nimport FilterByName from './FilterByName';\r\nimport Notification from './Notification/Notification';\r\n\r\nconst App = () => {\r\n    const [ persons, setPersons] = useState([]);\r\n    const [ newName, setNewName ] = useState('');\r\n    const [ newPhone, setNewPhone ] = useState('');\r\n    const [ newNameFilter, setNewNameFilter ] = useState('');\r\n    const [ notificationMessage, setNotificationMessage ] = useState('');\r\n    const [ notificationType, setNotificationType ] = useState('');\r\n\r\n    const setNotification = (message = '', type = '') => {\r\n        setNotificationMessage(message);\r\n        setNotificationType(type);\r\n        setTimeout(() => {\r\n            setNotification();\r\n        }, 3000);\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        phonebookService.getAll().then(result => setPersons(result)).catch(() => { setPersons([]) });\r\n    }, []);\r\n\r\n    const addPersonHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const newPerson = {\r\n            name: newName,\r\n            number: newPhone\r\n        };\r\n\r\n        const personExistsByName = persons.find((p) => p.name === newPerson.name);\r\n\r\n        if (personExistsByName) {\r\n            const toUpdate = window.confirm(`${newName} is already added to the phone book. Update the phone number?`);\r\n            if (toUpdate) {\r\n                updatePhoneNumber(personExistsByName.id);\r\n            }\r\n        } else if (persons.find((p) => p.number === newPerson.number)) {\r\n            alert(`${newPhone} is already assigned to someone else`);\r\n        }\r\n        else {\r\n            phonebookService.addNewPerson(newPerson)\r\n                .then(result => {\r\n                    setPersons([...persons, result]);\r\n                    setNotification(`${newPerson.name} successfully added`, 'success');\r\n                    setTimeout(() => {\r\n                        setNotification();\r\n                    }, 3000);\r\n                    setNewName('');\r\n                    setNewPhone('');\r\n                })\r\n                .catch((e) => {\r\n                    setNotification(e.message, 'error');\r\n                    setTimeout(() => {\r\n                        setNotification();\r\n                    }, 3000);\r\n                });\r\n        }\r\n    };\r\n\r\n    const deletePerson = (person) => {\r\n        const toBeDeleted = window.confirm(`Delete ${person.name}?`);\r\n        if (toBeDeleted) {\r\n            phonebookService.deletePerson(person.id)\r\n                .then(() => {\r\n                    const newPersons = persons.filter((p) => p.id !== person.id);\r\n                    setPersons(newPersons);\r\n                    setNotification(`${person.name} was successfully deleted`, 'success');\r\n                    setTimeout(() => {\r\n                        setNotification();\r\n                    }, 3000);\r\n                })\r\n                .catch(() => {\r\n                    setNotification(`${person.name} was already deleted`, 'error');\r\n                    setTimeout(() => {\r\n                        setNotification();\r\n                    }, 3000);\r\n                });\r\n        }\r\n    };\r\n\r\n    const updatePhoneNumber = (personId) => {\r\n        const person = persons.find((p) => p.id === personId);\r\n        const updatedPerson = {...person, number: newPhone};\r\n        phonebookService.updatePerson(personId, updatedPerson)\r\n            .then(() => {\r\n                setNotification(`${person.name}'s phone was updated`, 'success');\r\n                setTimeout(() => {\r\n                    setNotification();\r\n                }, 3000);\r\n                setPersons(persons.map((p) => p.id !== updatedPerson.id ? p : updatedPerson));\r\n            });\r\n    };\r\n\r\n    const onNameChangeHandler = (e) => {\r\n        setNewName(e.target.value);\r\n    };\r\n\r\n    const onPhoneChangeHandler = (e) => {\r\n        setNewPhone(e.target.value);\r\n    };\r\n\r\n    const onFilterChangeHandler = (e) => {\r\n        setNewNameFilter(e.target.value);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Notification message={notificationMessage} type={notificationType} />\r\n            <span>Search by name:</span>\r\n            <FilterByName filterValue={newNameFilter} onChange={onFilterChangeHandler}/>\r\n            <h2>Add a new contact</h2>\r\n            <ContactForm addPerson={addPersonHandler} onNameChange={onNameChangeHandler} onPhoneChange={onPhoneChangeHandler} newPhone={newPhone} newName={newName} />\r\n            <h2>Numbers</h2>\r\n            <ContactList contacts={persons} filter={newNameFilter} onDelete={deletePerson}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}